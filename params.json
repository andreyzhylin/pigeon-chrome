{"name":"Pigeon","tagline":"","body":"# Вступление\r\n## Для чего служит pigeon?\r\nВ некоторых случаях JavaScript код должен правильно работать на разных веб сайтах (например расширение для браузера).\r\nВ таком случае проверка правильности часто сводится к открытию страницы, выполнению скрипта в консоли и анализу полученного результата.\r\nНо самое неприятное заключается в том, что если алгоритм слегка меняется, то необходимо выполнять все проверки заново.\r\nPigeon был создан с целью автоматизировать этот процесс.\r\n\r\n## Принцип работы\r\nPigeon реализован в виде расширения к браузеру Chrome и использует его API для запуска тестов.\r\nДля начала работы пользователю необходимо задать URL страницы на которой будут выполняться тесты и создать один или несколько тестов, которые будут на ней выполнены (_подробнее об использовании в пункте \"Пример использования\"_).\r\n\r\nПри нажатии на кнопку запуска теста, Pigeon выполнит следующие действия:\r\n\r\n1. Откроет вкладку с заданной страницей\r\n\r\n2. Дождется загрузки страницы\r\n\r\n3. Выполнит служебный код\r\n\r\n4. Выполнит код пользовательских файлов (в порядке загрузки)\r\n\r\n5. Выполнит код теста\r\n\r\n    - Если в ходе выполнения возникла ошибка или пользователем вызван метод pigeon.reject, то тест пройден с ошибкой\r\n    - Если все вызовы метода pigeon.expect теста получили истинное значение, то тест пройден успешно\r\n    - Иначе тест провален\r\n\r\n# Установка\r\n## При помощи пакета crx\r\n1. Скачайте [последнюю версию](https://github.com/andreyzhylin/pigeon-chrome/releases/download/v1.1.6/pigeon-chrome-1.1.6.crx).\r\n2. Зайдите на страницу расширений - chrome://extensions/ (**Дополнительные инструменты > Расширения**).\r\n3. Перетащите скачанный файл на страницу.\r\n\r\n## Из исходников\r\nУстановите Node.js и затем:\r\n```\r\n$ git clone https://github.com/andreyzhylin/pigeon-chrome.git\r\n$ cd pigeon-chrome\r\n$ npm -g install grunt-cli karma bower\r\n$ npm install\r\n$ bower install\r\n$ grunt build\r\n```\r\n- Зайдите на страницу расширений - chrome://extensions/ (**Дополнительные инструменты > Расширения**).\r\n- Убедитесь, что установлен флажок \"Режим разработчика\" в правом верхнем углу.\r\n- Нажмите \"Загрузить распакованное расширение...\".\r\n- Переместитесь к папке '*/pigeon-chrome/build' и выберите её\r\n\r\n# Пример использования\r\n## Базовое использование\r\n1. Откройте страницу \"Параметры\", вы увидите главную страницу приложения:\r\n    ![Главная страница приложения](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-0.png) \r\n\r\n2. Переключитесь для удобства на русский язык в правом верхнем углу:\r\n    ![Главная страница приложения на русском](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-1.png) \r\n\r\n3. Перейдите на страницу \"Настройки\" и нажмите \"Установить базовый набор\":\r\n    ![Главная страница приложения на русском](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-2.png) \r\n\r\n4. Перейдите на страницу \"Обзор тестов\", вы увидите, что появилась таблица с базовым набором тестов:\r\n    ![Обзор базового набора тестов](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-3.png) \r\n\r\n5. Есть 2 основных сущности, это \"страница\" и \"тест\", страницы выделены синим цветом в таблице. Нажмите на иконку редактирования напротив первой страницы:\r\n    ![Редактирование страницы](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-4.png) \r\n    Описание страницы - отображается в таблице, URL адрес - адрес на котором будут выполняться тесты.\r\n    При отмеченном флажке Pigeon будет открывать новое окно вместо новой вкладки при запуске тестов - это делает вкладку теста активной и полезно при отладке или если DOM не обновляется на неактивной вкладке.\r\n\r\n6. Вернитесь к обзору и нажмите на иконку редактирования напротив первого теста первой страницы:\r\n    ![Редактирование теста](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-5.png) \r\n    Тест содержит описание, отображаемое в таблице, код, выполняемый на странице и флажок режима отладки, о котором будет речь в разделе \"Отладка тестов\". \r\n\r\n7. Перед запуском этого теста, разберем его код:\r\n    ```javascript\r\n    var searchInput = document.getElementsByName('q')[0];\r\n\r\n    pigeon.expect('Поле ввода поиска определено', typeof searchInput !== 'undefined');\r\n    pigeon.expect('Тег поля ввода совпадает', searchInput.tagName === 'INPUT');\r\n\r\n    // Метод 'pigeon.resolve' должен вызываться, тест считается полностью выполненным\r\n    pigeon.resolve();\r\n    ```\r\n    У страницы был установлен URL - https://www.google.com/, поэтому после запуска откроется вкладка с этим адресом.\r\n    После загрузки страницы начнет выполняться код.\r\n    Тест называется \"Страница загружается\", поэтому данным кодом мы:\r\n        - Проверяем что строка поиска (элемент DOM с именем 'q') присутствует на странице\r\n        - Строка поиска является тегом 'input'\r\n        - Завершаем тест\r\n\r\n    В коде теста используются служебные методы pigeon:\r\n\r\n        pigeon.expect(message, testCase)\r\n\r\n        pigeon.resolve()\r\n\r\n    **pigeon.expect** - создает значение, которое должно быть проверено, если хотя бы один из expect методов примет значение testCase === false, то тест не будет пройдет, а в таблице будет указан message.\r\n\r\n    **pigeon.resolve** - сообщает, что тест закончил выполнение.\r\n\r\n    Вернемся к обзору тестов и запустим данный тест:\r\n    ![Запуск теста](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-6.png)\r\n    Как мы видим тест завершился успешно, а значит все параметры переданные в pigeon.expect являются истинными значениями.\r\n\r\n8. Рассмотрим код следующего теста:\r\n    ```javascript\r\n    location.href = '/#q=github';\r\n    // Ждем 1 секунду, пока обрабатывается наш запрос\r\n\r\n    setTimeout(function () {\r\n      pigeon.expect('Результаты загружены', typeof ires !== 'undefined');\r\n      pigeon.expect('Адрес сайта присутствует в результатах', ires.innerText.indexOf('github.com') !== -1);\r\n\r\n      // В данном случае тест считается законченным здесь, а не в конце скрипта\r\n      pigeon.resolve();\r\n    }, 1000);\r\n\r\n    pigeon.expect('Результаты не появляются мгновенно', typeof ires === 'undefined');\r\n    // Здесь заканчивается выполнение скрипта, но тест будет выполнен\r\n    // после вызова pigeon.resolve или по таймауту\r\n    ```\r\n    В данном случае мы меняем свойство location.href, что приводит запросу поиска, т.к. на это потребуется время, то проверку будет проводить через 1 секунду, а сразу-же проверим, что результат еще не готов.\r\n\r\n    После этой проверки, как указано в комментарии, скрипт заканчивает работу, но т.к. метод pigeon.resolve не вызывался, тест на заканчивается.\r\n\r\n    Через секунду вызовется функция проверки, в которой мы убедимся, что \"Google находит сайт github.com\" и вызовом метода pigeon.resolve завершим тест.\r\n\r\n9. Код третьего теста похож на код второго, но теперь мы ищем упоминания о pigeon-chrome:\r\n    ```javascript\r\n    location.href = '/#q=pigeon-chrome';\r\n    // Ждем 1 секунду, пока обрабатывается наш запрос\r\n\r\n    setTimeout(function () {\r\n      pigeon.expect('Результаты загружены', typeof ires !== 'undefined');\r\n      pigeon.expect('Гугл не нашел pigeon :(', ires.innerText.indexOf('pigeon-chrome') !== -1);\r\n\r\n      // В данном случае тест считается законченным здесь, а не в конце скрипта\r\n      pigeon.resolve();\r\n    }, 1000);\r\n    ```\r\n    Запустите второй и третий тест и вы увидите, что второй завершился успешно, а третий не пройден и при клике на знак вопроса отображает message того метода pigeon.expect, который получил параметр false:\r\n    ![Запуск теста не пройден](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-7.png)\r\n\r\n## Обработка ошибок\r\nЕсли код вашего теста генерирует ошибку, то тест помечается статусом \"Ошибка\" и снабжается сообщением этой ошибки.\r\n\r\nНа второй странице базового набора демонстрируются основные виды ошибок, которые могут возникнуть:\r\n\r\n1. Ошибки компиляции (Синтаксические ошибки)\r\n    ```javascript\r\n    if { // Ошибка компиляции\r\n\r\n    pigeon.expect('Always success', true);\r\n    pigeon.resolve();\r\n    ```\r\n\r\n2. Ошибки времени выполнения (Семантические ошибки)\r\n    ```javascript\r\n    var foo = bar.baz;\r\n\r\n    pigeon.expect('Always success', true);\r\n    pigeon.resolve();\r\n    ```\r\n\r\n3. Таймаут операции\r\n    ```javascript\r\n    // Таймаут операции возникает, если метод pigeon.resolve не был вызван в течение заданного времени\r\n    // Вы можете изменить время на вкладке \"Настройки\" или отключить для любого теста посредством режима отладки\r\n\r\n    pigeon.expect('Всегда успешно', true);\r\n    // pigeon.resolve();\r\n    ```\r\n\r\n4. Ошибка pigeon.expect\r\n    ```javascript\r\n    // Метод pigeon.expect ожидает значение типа Boolean в качестве 2 параметра\r\n    // В случае если будет получено значение другого типа, возникнет ошибка\r\n    pigeon.expect('Ответ на главный вопрос жизни, вселенной и всего такого.', 42);\r\n    pigeon.resolve();\r\n    ```\r\n\r\n5. Пользовательские ошибки\r\n    ```javascript\r\n    pigeon.expect('Всегда успешно', true);\r\n\r\n    pigeon.reject('Описание пользовательский ошибки');\r\n\r\n    pigeon.resolve();\r\n    ```\r\n\r\n    Здесь использован третий служебный метод:\r\n\r\n    **pigeon.reject(message)** - используйте его, если самостоятельно обрабатываете ошибки.\r\n\r\n    Запустите все тесты на странице, нажав на иконку обновления в строке третьей страницы:\r\n    ![Запуск тестов с ошибкой](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-8.png)\r\n\r\n\r\n## Отладка тестов ##\r\n\r\n1. Для отладки тестов необходимо установить флажок \"Режим отладки\" на странице редактирования теста.\r\n    В этом режиме, тест не будет завершаться по таймауту, а вкладка останется открытой даже после завершения теста.\r\n\r\n2. Все вызовы служебных методов автоматически логируются в консоль (запустите 1 тест на 3 странице):\r\n    ```javascript\r\n    // В режиме отладки вкладка не будет закрыта после выполнения теста или по таймауту\r\n    // Что позволяет вам отладить ваши тесты\r\n    pigeon.expect('Всегда успешно', true);\r\n    pigeon.expect('Всегда не пройден', false);\r\n    pigeon.expect('Не значение типа boolean', [1]);\r\n    pigeon.resolve();\r\n    ```\r\n\r\n    ![Логирование служебных методов](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-9.png)\r\n\r\n3. Вы также можете использовать в своём коде такие средства как console.log, debugger, и т.д. Рассмотрим код последнего теста:\r\n    ```javascript\r\n    // Вы можете использовать панель разработчика и такие средства как console.log, debugger и другие\r\n    console.log('Начало теста');\r\n\r\n    var logo = document.getElementsByClassName('central-featured-logo')[0];\r\n    logo.onclick = function () {\r\n      console.log('Клик по лого');\r\n      debugger;\r\n      pigeon.expect('Всегда успешно', true);\r\n      pigeon.resolve();\r\n    }\r\n    ```\r\n\r\n    Выводим в консоль текст и подписываемся на событие клика по лого.\r\n    После клика - выведем еще немного текста в консоль, остановимся в точке останова и после продолжения успешно завершим тест:\r\n    ![Точка останова](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-10.png)\r\n    ![Успешное завершение](https://github.com/andreyzhylin/pigeon-chrome/raw/master/common/img/sample-ru/sample-11.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}